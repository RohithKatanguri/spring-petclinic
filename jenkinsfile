pipeline{
    //Directives
    agent any
    tools {
        maven 'maven'
    }
    
    environment{
   NEXUSIP='65.0.101.0'
   NEXUSPORT='8081'
   registryCredential = 'RohithKatanguri'
   registry='912776142274.dkr.ecr.us-east-1.amazonaws.com/petclinicproject'
   DOCKER_HUB_REPO = "rohith0718/petclinic"
   dockerImage = ''
   IMAGE_NAME = 'petclinic'
   SSH_KEY = credentials('ssh-key-id1')
   // SSH_PRIVATE_KEY = credentials('ssh-key-id1').privateKey
   DOCKER_COMPOSE_FILE = 'docker-compose-file.yml'
   EC2_INSTANCE = '172.31.25.234'
   SSH_USER = 'ec2-user'
    }
    
    stages {
        // Specify various stage with in stages 

        // stage 1. Build
        stage ('Build maven project rohith'){
            steps {
                sh 'mvn clean install package'
            }
        }
 stage('SonarQube analysis') {
            steps{

       echo ' revewing....'
              //   withSonarQubeEnv('sonarqube-9.9'){ 
                    // Optionally use a Maven environment you've configured already
                //  sh 'mvn clean verify sonar:sonar \
 //  -Dsonar.projectKey=sonarqube-petclinic \
 //  -Dsonar.login=sqp_df2060cd23a05a21c638fdde127cac4b146a1741'
//}

}
}
stage('Publish to nexus') {
            steps{
            
            echo 'publish artifact....'
             // nexusArtifactUploader artifacts: [[artifactId: 'spring-petclinic', classifier: '', file: 'target/spring-petclinic-3.0.0-SNAPSHOT.jar', type: 'jar']], credentialsId: 'fb7d51a5-450b-48b0-9d2e-d485a59436ef', groupId: 'org.springframework.samples',nexusUrl: "${NEXUSIP}:${NEXUSPORT}", nexusVersion: 'nexus3', protocol: 'http', repository: 'petclinic-Rohith-snapshot', version: '3.0.0-SNAPSHOT'
       
}

}
stage('copy artifact') {

steps{
   sh 'pwd'
   sh 'cp -r target/*.jar docker'
//script{
 // dockerImage = docker.build registry + ":$BUILD_NUMBER"
    // }
   }
}

stage('Build docker image') {
steps{
script {
def petclinicimage=docker.build('rohith0718/petclinic',"./docker")
docker.withRegistry("https://registry.hub.docker.com",'rohith0718' ) {
petclinicimage.push("${env.BUILD_NUMBER}")
}
}
}
}

    


        // Stage2 : Testing
        stage ('Test'){
            steps {
                echo ' testing......'

            }
        }
        
         
       stage('Pull Docker image') {
           steps {
            
               script {
               
                       
                  sshagent(['SSH_KEY']) {
                      sh "ssh -o StrictHostKeyChecking=no ${SSH_USER}@${EC2_INSTANCE} docker pull ${DOCKER_HUB_REPO}"
                  }
                  
               }
           }
       }
       
       stage('Deploy to EC2') {
           steps {
               script {
                   // sshagent(['SSH_KEY']) {
                     //  sh "ssh -o StrictHostKeyChecking=no ${SSH_USER}@${EC2_INSTANCE} docker-compose -f ${DOCKER_COMPOSE_FILE} up -d"
                     
                     
                    withCredentials([sshUserPrivateKey(credentialsId: 'ssh-key-id1', keyFileVariable: 'SSH_PRIVATE_KEY', passphraseVariable: '', usernameVariable: 'SSH_USERNAME')]) {
                        sshagent(['ssh-key-id1']) {
                            sh "ssh -o StrictHostKeyChecking=no -i ${SSH_PRIVATE_KEY} ${SSH_USERNAME}@${EC2_INSTANCE_IP} docker login -u ${DOCKERHUB_USERNAME} -p ${DOCKERHUB_PASSWORD}"
                            sh "ssh -o StrictHostKeyChecking=no -i ${SSH_PRIVATE_KEY} ${SSH_USERNAME}@${EC2_INSTANCE_IP} docker pull ${DOCKERHUB_USERNAME}/${IMAGE_NAME}"
                            sh "ssh -o StrictHostKeyChecking=no -i ${SSH_PRIVATE_KEY} ${SSH_USERNAME}@${EC2_INSTANCE_IP} docker stop ${IMAGE_NAME} || true"
                            sh "ssh -o StrictHostKeyChecking=no -i ${SSH_PRIVATE_KEY} ${SSH_USERNAME}@${EC2_INSTANCE_IP} docker rm ${IMAGE_NAME} || true"
                            sh "ssh -o StrictHostKeyChecking=no -i ${SSH_PRIVATE_KEY} ${SSH_USERNAME}@${EC2_INSTANCE_IP} docker run -d --name ${IMAGE_NAME} -p 80:80 ${DOCKERHUB_USERNAME}/${IMAGE_NAME}"
                        }
                   }
               }
           }
       }
}
}



